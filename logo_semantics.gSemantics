semantics logo_semantics :
  import "logo_options.gOption" ;

# On crée nos classes d'instructions 
abstract class @instruction {
}

class @penUp extends @instruction {
}

class @penDown extends @instruction {
}

class @forward extends @instruction {
	@luint mLength ;
}

class @rotate extends @instruction {
	@luint mAngle ;
}

# On crée une liste d'instructions 
list @instructionList {
	@instruction mInstruction ;
}

# On crée une table des routines
map @routineMap {
	@instructionList mInstructionList ;
	insert insertKey error message "the '%K' routine has been already declared" ;
	search searchKey error message "the '%K' routine is not declared";
}

abstract method @instruction codeDisplay 
	?!@bool ioPenDown
	?!@double ioX
	?!@double ioY
	?!@double ioAngle
	?!@string SVGInstructionString
;

override method @penUp codeDisplay
	?!@bool ioPenDown
	?!@double unused ioX
	?!@double unused ioY
	?!@double unused ioAngle
	?!@string unused SVGInstructionString
	:
	ioPenDown := false ;
end method ;

override method @penDown codeDisplay
	?!@bool ioPenDown
	?!@double unused ioX
	?!@double unused ioY
	?!@double unused ioAngle
	?!@string unused SVGInstructionString
	:
	ioPenDown := true ;
end method ;

override method @rotate codeDisplay
	?!@bool unused ioPenDown
	?!@double unused ioX
	?!@double unused ioY
	?!@double ioAngle
	?!@string unused SVGInstructionString
	:
	ioAngle := ioAngle + [[mAngle uint] double] ;
end method ;

override method @forward codeDisplay
	?!@bool ioPenDown
	?!@double ioX
	?!@double ioY
	?!@double ioAngle
	?!@string SVGInstructionString
	:
	const @double x := ioX + [mLength double] * [ioAngle cosDegree] ;
	const @double y := ioY + [mLength double] * [ioAngle sinDegree] ;
	if ioPenDown then
		@string mess := "<line x1=\"".ioX."\" y1=\"".ioY."\" x2=\"".x."\" y2=\"".y."\" style=\"stroke:#1F56D2\" /> \n";
		SVGInstructionString .= mess ; 
		message mess;
	end if ;
	ioX := x ;
	ioY := y ;
end method ;

end semantics ;
